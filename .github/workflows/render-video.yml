name: Render video

on:
  workflow_dispatch:
    inputs:
      src:
        description: 'Video URL or local path of the video'
        required: true
        default: ''
      subtitlesUrl:
        description: 'Subtitles generated with Whisper URL'
        required: false
        default: ''

jobs:
  render:
    name: Render video
    runs-on: ubuntu-latest

    env:
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@main

      - name: Setup Node
        uses: actions/setup-node@main

      - name: Install dependencies
        run: npm ci

      - name: Get component props
        run: echo $WORKFLOW_INPUT > input-props.json
        env:
          WORKFLOW_INPUT: ${{ toJson(github.event.inputs) }}

      - name: Render video
        run: npx remotion render CaptionedVideo out/rendered-video.mp4 --props="./input-props.json"

      # - name: Upload video to Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: rendered-video.mp4
      #     path: out/rendered-video.mp4

      # - name: Upload to Cloudinary
      #   run: node upload-video.mjs
      #   env:
      #     CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      #     CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      #     CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

      - name: Generate UUID and rename file
        id: rename
        run: |
          uuid=$(uuidgen)
          new_filename="${uuid}.mp4"
          mv out/rendered-video.mp4 out/$new_filename
          echo "NEW_FILENAME=$new_filename" >> $GITHUB_ENV

      - name: Upload to R2
        uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: out/${{ env.NEW_FILENAME }}
          destination-dir: bot/instagram/videos

      - name: Call Webhook
        run: |
          VIDEO_URL="https://app-automations.xyz/bot/instagram/videos/${{ env.NEW_FILENAME }}"
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X POST "${WEBHOOK_URL}?publishVideo=true" \
            -H "Content-Type: application/json" \
            -d "{\"videoWithSubtitles\": \"$VIDEO_URL\"}")

          echo "Webhook HTTP status: $RESPONSE"
          cat response.txt

          if [ "$RESPONSE" -ge 400 ]; then
            echo "‚ùå Webhook call failed with status code $RESPONSE"
            exit 1
          fi
